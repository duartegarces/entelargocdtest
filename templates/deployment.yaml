apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  name: {{ .Values.microservices.esim.name }}
  namespace: {{ .Values.namespace }}
  labels:
     app.kubernetes.io/name: dpl-{{ .Values.microservices.esim.services.esim.name }}
     app.kubernetes.io/instance: dpl-{{ .Values.microservices.esim.name }}
     app: dpl-{{ .Values.microservices.esim.name }}
spec:
  selector:
    matchLabels:
      app: dpl-{{ .Values.microservices.esim.name }}
      run: {{ .Values.microservices.esim.name }}
  replicas: {{ .Values.microservices.esim.replicaCount }}
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: dpl-{{ .Values.microservices.esim.name }}
        app: dpl-{{ .Values.microservices.esim.name }}
        project: {{ .Values.project }}
        run: {{ .Values.microservices.esim.name }}
    spec:
      containers:
        - name: {{ .Values.microservices.esim.name }}
          image: {{ .Values.microservices.esim.image }}:{{ .Values.microservices.esim.version }}
          imagePullPolicy: {{ .Values.microservices.esim.pullPolicy }}
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: bd-secret-{{ .Values.microservices.esim.name }}
                  key: secret
            - name: APIM_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: apim-shared-secret-{{ .Values.microservices.esim.name }}
                  key: secret
            - name: APIM_SECRET_CLIENT_ID 
              valueFrom:
                secretKeyRef:
                  name: apim-clientid-secret-{{ .Values.microservices.esim.name }}
                  key: secret
          envFrom:
            - configMapRef:
                name: cm-{{ .Values.microservices.esim.name }}
          ports:
            - containerPort: {{ .Values.microservices.esim.containerPort }}
            - containerPort: {{ .Values.microservices.esim.containerHZCPort }}
          readinessProbe:
            httpGet:
              path: {{ .Values.microservices.esim.probe.readiness.path }}
              port: {{ .Values.microservices.esim.containerPort }}
            initialDelaySeconds: {{ .Values.microservices.esim.probe.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.microservices.esim.probe.readiness.periodSeconds }}
            failureThreshold: {{ .Values.microservices.esim.probe.readiness.failureThreshold }}
          livenessProbe:
            httpGet:
              path: {{ .Values.microservices.esim.probe.liveness.path }}
              port: {{ .Values.microservices.esim.containerPort }}
            initialDelaySeconds: {{ .Values.microservices.esim.probe.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.microservices.esim.probe.liveness.periodSeconds }}
            failureThreshold: {{ .Values.microservices.esim.probe.liveness.failureThreshold }}
          volumeMounts:
            - name: {{ .Values.microservices.esim.volumeName }}
              mountPath: {{ .Values.microservices.esim.mountPath }}
      {{- if .imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.ociSecret.name }}
      {{- end }}
      volumes:
        - name: {{ .Values.microservices.esim.volumeName }}
          hostPath:
            path: {{ .Values.microservices.esim.volumePath }}{{ .Values.microservices.esim.timeZoneValue }}
